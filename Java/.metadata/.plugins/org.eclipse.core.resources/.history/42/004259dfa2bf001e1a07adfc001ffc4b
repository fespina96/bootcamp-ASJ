package com.integrador.spring.services;

import java.sql.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.integrador.spring.models.Order;
import com.integrador.spring.models.Supplier;
import com.integrador.spring.repositories.OrderRepository;

@Service
public class OrderService {
	@Autowired
	OrderRepository orderRepository;
	
	public List<Order> getOrders(){
		return orderRepository.findAll();
	}
	
	public Order getOrderById(int id) {
		Order  o= null;
		for(Order order:orderRepository.findAll()) {
			if(order.getId()==id) {
				o=order;
			}
		}
		return o;
	}
	
	public String addOrder(Order order) {
		Order orderInput = new Order();
		if(order!=null) {
			orderInput.setAddress(order.getAddress());
			orderInput.setDeliveryDate(order.getDeliveryDate());
			orderInput.setEmisionDate(order.getEmisionDate());
			orderInput.setEstimatedDeliveryDate(order.getEstimatedDeliveryDate());
			orderInput.setOrderState(order.getOrderState());
			orderInput.setSupplier(order.getSupplier());
			orderInput.setTotal(order.getTotal());
			orderRepository.save(orderInput);
			return "Orden agregada correctamente";
		}else {
			return "Error al agregar orden";
		}
	}
	
	public String editSupplier(Integer id,Supplier supplier) {
		Supplier supplierInput = supplierRepository.findById(id).get();
		if(supplier!=null) {
			supplierInput.setAddress(supplier.getAddress());
			supplierInput.setCode(supplier.getCode());
			supplierInput.setCondition(supplier.getCondition());
			supplierInput.setContactEmail(supplier.getContactEmail());
			supplierInput.setContactName(supplier.getContactName());
			supplierInput.setContactPhone(supplier.getContactPhone());
			supplierInput.setContactRole(supplier.getContactRole());
			supplierInput.setContactSurname(supplier.getContactSurname());
			supplierInput.setCountry(supplier.getCountry());
			supplierInput.setCuit(supplier.getCuit());
			supplierInput.setEmail(supplier.getEmail());
			supplierInput.setLogoImageUrl(supplier.getLogoImageUrl());
			supplierInput.setName(supplier.getName());
			supplierInput.setPhone(supplier.getPhone());
			supplierInput.setState(supplier.getState());
			supplierInput.setSupplierCategory(supplier.getSupplierCategory());
			supplierInput.setWebsite(supplier.getWebsite());
			supplierInput.setZipCode(supplier.getZipCode());
			supplierInput.setUpdatedAt(new Date(System.currentTimeMillis()));
			supplierRepository.save(supplierInput);
			return "Proveedor editado correctamente";
		}else {
			return "Error al editar proveedor";
		}
	}
	
	public String deleteSupplierById(Integer id) {
		Supplier s = supplierRepository.findById(id).get();
		if(s!=null) {
			s.setDeletedAt(new Date(System.currentTimeMillis()));
			supplierRepository.save(s);
			return "Proveedor #"+id+" eliminada correctamente";
		}
		return "Error al borrar proveedor.";
	}
}
